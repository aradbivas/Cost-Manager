{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\bivas\\\\Desktop\\\\Cost-Manager\\\\front\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\bivas\\\\Desktop\\\\Cost-Manager\\\\front\\\\front\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = \"function\" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || \"@@iterator\", asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\", toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, \"\"); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = \"suspendedStart\"; return function (method, arg) { if (\"executing\" === state) throw new Error(\"Generator is already running\"); if (\"completed\" === state) { if (\"throw\" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if (\"next\" === context.method) context.sent = context._sent = context.arg;else if (\"throw\" === context.method) { if (\"suspendedStart\" === state) throw state = \"completed\", context.arg; context.dispatchException(context.arg); } else \"return\" === context.method && context.abrupt(\"return\", context.arg); state = \"executing\"; var record = tryCatch(innerFn, self, context); if (\"normal\" === record.type) { if (state = context.done ? \"completed\" : \"suspendedYield\", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } \"throw\" === record.type && (state = \"completed\", context.method = \"throw\", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: \"normal\", arg: fn.call(obj, arg) }; } catch (err) { return { type: \"throw\", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { [\"next\", \"throw\", \"return\"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if (\"throw\" !== record.type) { var result = record.arg, value = result.value; return value && \"object\" == typeof value && hasOwn.call(value, \"__await\") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke(\"next\", value, resolve, reject); }, function (err) { invoke(\"throw\", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke(\"throw\", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, \"throw\" === context.method) { if (delegate.iterator.return && (context.method = \"return\", context.arg = undefined, maybeInvokeDelegate(delegate, context), \"throw\" === context.method)) return ContinueSentinel; context.method = \"throw\", context.arg = new TypeError(\"The iterator does not provide a 'throw' method\"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if (\"throw\" === record.type) return context.method = \"throw\", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, \"return\" !== context.method && (context.method = \"next\", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = \"throw\", context.arg = new TypeError(\"iterator result is not an object\"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = \"normal\", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: \"root\" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if (\"function\" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, \"constructor\", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, \"GeneratorFunction\"), exports.isGeneratorFunction = function (genFun) { var ctor = \"function\" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || \"GeneratorFunction\" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, \"GeneratorFunction\")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, \"Generator\"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, \"toString\", function () { return \"[object Generator]\"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { \"t\" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if (\"throw\" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = \"throw\", record.arg = exception, context.next = loc, caught && (context.method = \"next\", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if (\"root\" === entry.tryLoc) return handle(\"end\"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, \"catchLoc\"), hasFinally = hasOwn.call(entry, \"finallyLoc\"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error(\"try statement without catch or finally\"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, \"finallyLoc\") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && (\"break\" === type || \"continue\" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = \"next\", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if (\"throw\" === record.type) throw record.arg; return \"break\" === record.type || \"continue\" === record.type ? this.next = record.arg : \"return\" === record.type ? (this.rval = this.arg = record.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if (\"throw\" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, \"next\" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }\n\nimport { useState } from \"react\";\nimport { useAuthContext } from \"./useAuthContext\";\nexport var useSubmit = function useSubmit() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      message = _useState4[0],\n      setMessage = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setISLoading = _useState6[1];\n\n  var _useAuthContext = useAuthContext(),\n      user = _useAuthContext.user;\n\n  var submit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(category, description, sum) {\n      var response, json;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setISLoading(true);\n              setError(null);\n              setMessage(null);\n\n              if (!user) {\n                _context.next = 14;\n                break;\n              }\n\n              _context.next = 6;\n              return fetch(\"http://localhost:4020/api/report/addItem\", {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Authorization': \"Bearer \".concat(user.token)\n                },\n                body: JSON.stringify({\n                  category: category,\n                  description: description,\n                  sum: sum\n                })\n              });\n\n            case 6:\n              response = _context.sent;\n              _context.next = 9;\n              return response.json();\n\n            case 9:\n              json = _context.sent;\n\n              if (!response.ok) {\n                setISLoading(false);\n                setError(json.error);\n              }\n\n              if (response.ok) {\n                setISLoading(false);\n                setMessage(json);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 14:\n              setError(\"Please login!\");\n              return _context.abrupt(\"return\");\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submit(_x, _x2, _x3) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    submit: submit,\n    isLoading: isLoading,\n    error: error,\n    message: message\n  };\n};","map":{"version":3,"names":["useState","useAuthContext","useSubmit","error","setError","message","setMessage","isLoading","setISLoading","user","submit","category","description","sum","fetch","method","headers","token","body","JSON","stringify","response","json","ok"],"sources":["C:/Users/bivas/Desktop/Cost-Manager/front/front/src/hooks/useSubmit.js"],"sourcesContent":["import {useState} from \"react\";\r\nimport {useAuthContext} from \"./useAuthContext\";\r\n\r\nexport const useSubmit = () =>\r\n{\r\n    const[error, setError] = useState(null);\r\n    const[message, setMessage] = useState(null)\r\n    const [isLoading, setISLoading] = useState(null);\r\n    const { user} = useAuthContext();\r\n\r\n    const submit = async (category, description, sum) =>\r\n    {\r\n        setISLoading(true);\r\n        setError(null);\r\n        setMessage(null);\r\n        if(user)\r\n        {\r\n            const response = await  fetch(\"http://localhost:4020/api/report/addItem\",\r\n                {\r\n                    method: 'POST',\r\n                    headers: {'Content-Type': 'application/json',\r\n                        'Authorization': `Bearer ${user.token}`},\r\n                    body:JSON.stringify({category, description, sum})\r\n                })\r\n            const json = await  response.json();\r\n            if(!response.ok)\r\n            {\r\n                setISLoading(false);\r\n                setError(json.error);\r\n            }\r\n            if(response.ok)\r\n            {\r\n                setISLoading(false);\r\n                setMessage(json)\r\n            }\r\n        }\r\n        else {\r\n            setError(\"Please login!\");\r\n            return;\r\n        }\r\n\r\n    }\r\n    return {submit, isLoading, error, message};\r\n}"],"mappings":";;;+CACA,oJ;;AADA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,cAAR,QAA6B,kBAA7B;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,GACzB;EAAA,gBAC6BF,QAAQ,CAAC,IAAD,CADrC;EAAA;EAAA,IACUG,KADV;EAAA,IACiBC,QADjB;;EAAA,iBAEiCJ,QAAQ,CAAC,IAAD,CAFzC;EAAA;EAAA,IAEUK,OAFV;EAAA,IAEmBC,UAFnB;;EAAA,iBAGsCN,QAAQ,CAAC,IAAD,CAH9C;EAAA;EAAA,IAGWO,SAHX;EAAA,IAGsBC,YAHtB;;EAAA,sBAIoBP,cAAc,EAJlC;EAAA,IAIYQ,IAJZ,mBAIYA,IAJZ;;EAMI,IAAMC,MAAM;IAAA,sEAAG,iBAAOC,QAAP,EAAiBC,WAAjB,EAA8BC,GAA9B;MAAA;MAAA;QAAA;UAAA;YAAA;cAEXL,YAAY,CAAC,IAAD,CAAZ;cACAJ,QAAQ,CAAC,IAAD,CAAR;cACAE,UAAU,CAAC,IAAD,CAAV;;cAJW,KAKRG,IALQ;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAOiBK,KAAK,CAAC,0CAAD,EACzB;gBACIC,MAAM,EAAE,MADZ;gBAEIC,OAAO,EAAE;kBAAC,gBAAgB,kBAAjB;kBACL,kCAA2BP,IAAI,CAACQ,KAAhC;gBADK,CAFb;gBAIIC,IAAI,EAACC,IAAI,CAACC,SAAL,CAAe;kBAACT,QAAQ,EAARA,QAAD;kBAAWC,WAAW,EAAXA,WAAX;kBAAwBC,GAAG,EAAHA;gBAAxB,CAAf;cAJT,CADyB,CAPtB;;YAAA;cAODQ,QAPC;cAAA;cAAA,OAcaA,QAAQ,CAACC,IAAT,EAdb;;YAAA;cAcDA,IAdC;;cAeP,IAAG,CAACD,QAAQ,CAACE,EAAb,EACA;gBACIf,YAAY,CAAC,KAAD,CAAZ;gBACAJ,QAAQ,CAACkB,IAAI,CAACnB,KAAN,CAAR;cACH;;cACD,IAAGkB,QAAQ,CAACE,EAAZ,EACA;gBACIf,YAAY,CAAC,KAAD,CAAZ;gBACAF,UAAU,CAACgB,IAAD,CAAV;cACH;;cAxBM;cAAA;;YAAA;cA2BPlB,QAAQ,CAAC,eAAD,CAAR;cA3BO;;YAAA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAANM,MAAM;MAAA;IAAA;EAAA,GAAZ;;EAgCA,OAAO;IAACA,MAAM,EAANA,MAAD;IAASH,SAAS,EAATA,SAAT;IAAoBJ,KAAK,EAALA,KAApB;IAA2BE,OAAO,EAAPA;EAA3B,CAAP;AACH,CAxCM"},"metadata":{},"sourceType":"module"}